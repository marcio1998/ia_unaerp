# -*- coding: utf-8 -*-
"""xor_logistic_4_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BSQ6N-az2nRgRk9BCNKbS70gKzGzrIPK

# importações de bibliotecas e criação do data frame
"""

import numpy as np
import pandas as pd
df = pd.DataFrame()

"""## Criação das entradas."""

E1 = [0,0,1,1]
E2 = [0,1,0,1]
B = 10

"""#Definição dos pesos e trashhold.

### Trabalhar sempre com float

#Criação das matrizes
"""

w1 = np.array([[7.0, 2.0, 8.0],[9.0,4.0,2.0]])
w2 = np.array([5.0,1.0,5.5])

"""# Manipulação dos pesos e trash_hdold

### saber pela tabela se o peso tem que ser maior ou menor que o trash_hold na lógica para saber se o B(Beta) é positivo ou negativo para realizar conversão dos pesos e trash_hold para a matriz
"""

def manipular_peso_trash_hold(matriz, sinal):
  if matriz.shape[0] == 2:
    for i in range(matriz.shape[0]):
      beta = -B if sinal[i] == '-' else B
      for j in range(matriz.shape[1]):
        matriz[i][j] *= -beta if j == 2 else beta
  else:
    for i in range(matriz.shape[0]):
      beta = -B if sinal == '-' else B
      matriz[i] *= -beta if i == 2 else beta
manipular_peso_trash_hold(w1,['-', '+'])
manipular_peso_trash_hold(w2,'+')
print(w1)
print(w2)

x = np.zeros((1,3))
x

#criar as matrizes de entrada.
I = np.zeros((3,3))
O = np.zeros((3,3))
saidas = []
for i in range(len(E1)):
  #I1 - copia dos dados de entrada.
  I[0][0] = E1[i]
  I[0][1] = E2[i]
  I[0][2] = 1.0 # Constante.
  #Copia para os Outputs
  O[0][0] = I[0][0]
  O[0][1] = I[0][1]
  O[0][2] = I[0][2]
  #Calculo Para as entradas da segunda camada.
  I[1][0] = O[0][0]*w1[0][0] + O[0][1]*w1[0][1] + O[0][2]*w1[0][2]
  I[1][1] = O[0][0]*w1[1][0] + O[0][1]*w1[1][1] + O[0][2]*w1[1][2]
  I[1][2] = 1.0 # constante.
  #Calculo do Exp para trash_hold.
  O[1][0] = 1.0/(1.0+np.exp(-I[1][0]))
  O[1][1] = 1.0/(1.0+np.exp(-I[1][1]))
  O[1][2] = I[1][2]
  #calculo da ultima entrada
  I[2][0] = O[1][0]*w2[0] + O[1][1]*w2[1] + O[1][2]*w2[2]
  #Calculo da ultima saida
  O[2][0] = round(1.0/(1.0+np.exp(-I[2][0]))) 
  saidas.append(O[2][0])

df['E1'] = E1
df['E2'] = E2
df['Outputs'] = saidas
df